// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package projet_bi.partenaires_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: partenaires Purpose: Nombre total de demandes pour partenaires<br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.2.1.20160704_1411
 * @status 
 */
public class partenaires implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "partenaires";
	private final String projectName = "PROJET_BI";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					partenaires.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(partenaires.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tOracleInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleInput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleInput_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleInput_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleInput_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleInput_6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleInput_7_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleInput_8_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleInput_9_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleInput_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleInput_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleInput_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleInput_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleInput_7_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleInput_8_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleInput_9_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_PROJET_BI_partenaires = new byte[0];
		static byte[] commonByteArray_PROJET_BI_partenaires = new byte[0];

		public String Partenaire_Nom;

		public String getPartenaire_Nom() {
			return this.Partenaire_Nom;
		}

		public BigDecimal Nombre_total_de_demande;

		public BigDecimal getNombre_total_de_demande() {
			return this.Nombre_total_de_demande;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_BI_partenaires.length) {
					if (length < 1024
							&& commonByteArray_PROJET_BI_partenaires.length == 0) {
						commonByteArray_PROJET_BI_partenaires = new byte[1024];
					} else {
						commonByteArray_PROJET_BI_partenaires = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_BI_partenaires, 0, length);
				strReturn = new String(commonByteArray_PROJET_BI_partenaires,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_BI_partenaires) {

				try {

					int length = 0;

					this.Partenaire_Nom = readString(dis);

					this.Nombre_total_de_demande = (BigDecimal) dis
							.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Partenaire_Nom, dos);

				// BigDecimal

				dos.writeObject(this.Nombre_total_de_demande);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Partenaire_Nom=" + Partenaire_Nom);
			sb.append(",Nombre_total_de_demande="
					+ String.valueOf(Nombre_total_de_demande));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tOracleInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tLogRow_1 = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
				java.io.PrintStream consoleOut_tLogRow_1 = null;

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
				// /////////////////////

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tOracleInput_1 begin ] start
				 */

				ok_Hash.put("tOracleInput_1", false);
				start_Hash.put("tOracleInput_1", System.currentTimeMillis());

				currentComponent = "tOracleInput_1";

				int tos_count_tOracleInput_1 = 0;

				int nb_line_tOracleInput_1 = 0;
				java.sql.Connection conn_tOracleInput_1 = null;
				String driverClass_tOracleInput_1 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_1);

				String url_tOracleInput_1 = null;
				url_tOracleInput_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host="
						+ "srvlaboinfo"
						+ ")(port="
						+ "1521"
						+ "))(connect_data=(service_name="
						+ "orcl.intranet.int" + ")))";

				String dbUser_tOracleInput_1 = "BI_2";

				final String decryptedPassword_tOracleInput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("7acac362d4dfb4fc");

				String dbPwd_tOracleInput_1 = decryptedPassword_tOracleInput_1;

				conn_tOracleInput_1 = java.sql.DriverManager.getConnection(
						url_tOracleInput_1, dbUser_tOracleInput_1,
						dbPwd_tOracleInput_1);
				java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1
						.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1
						.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_1 = java.util.TimeZone
						.getDefault().getID();
				while (rsGetTZ_tOracleInput_1.next()) {
					sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1
							.getString(1);
				}
				((oracle.jdbc.OracleConnection) conn_tOracleInput_1)
						.setSessionTimeZone(sessionTimezone_tOracleInput_1);

				java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1
						.createStatement();

				String dbquery_tOracleInput_1 = "SELECT \n  BI_2.PARTENAIRE_PTN.PTN_NOM AS \"Partenaire Nom\", \n  SUM(BI_2.FAIT_PARTENAIRE.NBRE_DEMANDE) AS \"Nombre total de demande\"\n  FROM BI_2.FAIT_PARTENAIRE\n  INNER JOIN BI_2.PARTENAIRE_PTN \n    ON BI_2.PARTENAIRE_PTN.PTN_ID = BI_2.FAIT_PARTENAIRE.ACT_ID\nGROUP BY  BI_2.PARTENAIRE_PTN.PTN_NOM";

				globalMap.put("tOracleInput_1_QUERY", dbquery_tOracleInput_1);

				java.sql.ResultSet rs_tOracleInput_1 = null;
				try {
					rs_tOracleInput_1 = stmt_tOracleInput_1
							.executeQuery(dbquery_tOracleInput_1);
					java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1
							.getMetaData();
					int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1
							.getColumnCount();

					String tmpContent_tOracleInput_1 = null;

					while (rs_tOracleInput_1.next()) {
						nb_line_tOracleInput_1++;

						if (colQtyInRs_tOracleInput_1 < 1) {
							row1.Partenaire_Nom = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1
									.getString(1);
							if (tmpContent_tOracleInput_1 != null) {
								row1.Partenaire_Nom = tmpContent_tOracleInput_1;
							} else {
								row1.Partenaire_Nom = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 2) {
							row1.Nombre_total_de_demande = null;
						} else {

							if (rs_tOracleInput_1.getObject(2) != null) {
								row1.Nombre_total_de_demande = rs_tOracleInput_1
										.getBigDecimal(2);
							} else {

								row1.Nombre_total_de_demande = null;
							}
						}

						/**
						 * [tOracleInput_1 begin ] stop
						 */

						/**
						 * [tOracleInput_1 main ] start
						 */

						currentComponent = "tOracleInput_1";

						tos_count_tOracleInput_1++;

						/**
						 * [tOracleInput_1 main ] stop
						 */

						/**
						 * [tLogRow_1 main ] start
						 */

						currentComponent = "tLogRow_1";

						// row1
						// row1

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId,
									1, 1);
						}

						// /////////////////////

						strBuffer_tLogRow_1 = new StringBuilder();

						if (row1.Partenaire_Nom != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.Partenaire_Nom));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.Nombre_total_de_demande != null) { //

							strBuffer_tLogRow_1
									.append(row1.Nombre_total_de_demande
											.setScale(
													0,
													java.math.RoundingMode.HALF_UP)
											.toPlainString());

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_1 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_1);
						}
						consoleOut_tLogRow_1.println(strBuffer_tLogRow_1
								.toString());
						consoleOut_tLogRow_1.flush();
						nb_line_tLogRow_1++;
						// ////

						// ////

						// /////////////////////

						tos_count_tLogRow_1++;

						/**
						 * [tLogRow_1 main ] stop
						 */

						/**
						 * [tOracleInput_1 end ] start
						 */

						currentComponent = "tOracleInput_1";

					}
				} finally {
					stmt_tOracleInput_1.close();

					if (conn_tOracleInput_1 != null
							&& !conn_tOracleInput_1.isClosed()) {

						conn_tOracleInput_1.close();

					}

				}

				globalMap.put("tOracleInput_1_NB_LINE", nb_line_tOracleInput_1);

				ok_Hash.put("tOracleInput_1", true);
				end_Hash.put("tOracleInput_1", System.currentTimeMillis());

				/**
				 * [tOracleInput_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

				// ////
				// ////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tOracleInput_1 finally ] start
				 */

				currentComponent = "tOracleInput_1";

				/**
				 * [tOracleInput_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_PROJET_BI_partenaires = new byte[0];
		static byte[] commonByteArray_PROJET_BI_partenaires = new byte[0];

		public String Partenaire_Nom;

		public String getPartenaire_Nom() {
			return this.Partenaire_Nom;
		}

		public BigDecimal nombre_demandes_de_2m;

		public BigDecimal getNombre_demandes_de_2m() {
			return this.nombre_demandes_de_2m;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_BI_partenaires.length) {
					if (length < 1024
							&& commonByteArray_PROJET_BI_partenaires.length == 0) {
						commonByteArray_PROJET_BI_partenaires = new byte[1024];
					} else {
						commonByteArray_PROJET_BI_partenaires = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_BI_partenaires, 0, length);
				strReturn = new String(commonByteArray_PROJET_BI_partenaires,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_BI_partenaires) {

				try {

					int length = 0;

					this.Partenaire_Nom = readString(dis);

					this.nombre_demandes_de_2m = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Partenaire_Nom, dos);

				// BigDecimal

				dos.writeObject(this.nombre_demandes_de_2m);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Partenaire_Nom=" + Partenaire_Nom);
			sb.append(",nombre_demandes_de_2m="
					+ String.valueOf(nombre_demandes_de_2m));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tOracleInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());

				currentComponent = "tLogRow_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tLogRow_2 = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
				java.io.PrintStream consoleOut_tLogRow_2 = null;

				StringBuilder strBuffer_tLogRow_2 = null;
				int nb_line_tLogRow_2 = 0;
				// /////////////////////

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tOracleInput_2 begin ] start
				 */

				ok_Hash.put("tOracleInput_2", false);
				start_Hash.put("tOracleInput_2", System.currentTimeMillis());

				currentComponent = "tOracleInput_2";

				int tos_count_tOracleInput_2 = 0;

				int nb_line_tOracleInput_2 = 0;
				java.sql.Connection conn_tOracleInput_2 = null;
				String driverClass_tOracleInput_2 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_2);

				String url_tOracleInput_2 = null;
				url_tOracleInput_2 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host="
						+ "srvlaboinfo"
						+ ")(port="
						+ "1521"
						+ "))(connect_data=(service_name="
						+ "orcl.intranet.int" + ")))";

				String dbUser_tOracleInput_2 = "BI_2";

				final String decryptedPassword_tOracleInput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("7acac362d4dfb4fc");

				String dbPwd_tOracleInput_2 = decryptedPassword_tOracleInput_2;

				conn_tOracleInput_2 = java.sql.DriverManager.getConnection(
						url_tOracleInput_2, dbUser_tOracleInput_2,
						dbPwd_tOracleInput_2);
				java.sql.Statement stmtGetTZ_tOracleInput_2 = conn_tOracleInput_2
						.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_2 = stmtGetTZ_tOracleInput_2
						.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_2 = java.util.TimeZone
						.getDefault().getID();
				while (rsGetTZ_tOracleInput_2.next()) {
					sessionTimezone_tOracleInput_2 = rsGetTZ_tOracleInput_2
							.getString(1);
				}
				((oracle.jdbc.OracleConnection) conn_tOracleInput_2)
						.setSessionTimeZone(sessionTimezone_tOracleInput_2);

				java.sql.Statement stmt_tOracleInput_2 = conn_tOracleInput_2
						.createStatement();

				String dbquery_tOracleInput_2 = "SELECT\n  BI_2.PARTENAIRE_PTN.PTN_NOM AS \"Partenaire Nom\", \n  SUM(BI_2.FAIT_PARTENAIRE.NBRE_DEMANDE) AS \"nombre demandes de 2m\"\n  FROM BI_2.FAIT_PARTENAIRE\n  INNER JOIN BI_2.PARTENAIRE_PTN \n    ON BI_2.PARTENAIRE_PTN.PTN_ID = BI_2.FAIT_PARTENAIRE.ACT_ID\n  WHERE BI_2.FAIT_PARTENAIRE.DATE_DTE_ID IN (\n    SELECT BI_2.DATE_DTE.DTE_ID \n    FROM BI_2.DATE_DTE\n    WHERE DTE_DATE > ADD_MONTHS(CURRENT_DATE, -2))\nGROUP BY  BI_2.PARTENAIRE_PTN.PTN_NOM";

				globalMap.put("tOracleInput_2_QUERY", dbquery_tOracleInput_2);

				java.sql.ResultSet rs_tOracleInput_2 = null;
				try {
					rs_tOracleInput_2 = stmt_tOracleInput_2
							.executeQuery(dbquery_tOracleInput_2);
					java.sql.ResultSetMetaData rsmd_tOracleInput_2 = rs_tOracleInput_2
							.getMetaData();
					int colQtyInRs_tOracleInput_2 = rsmd_tOracleInput_2
							.getColumnCount();

					String tmpContent_tOracleInput_2 = null;

					while (rs_tOracleInput_2.next()) {
						nb_line_tOracleInput_2++;

						if (colQtyInRs_tOracleInput_2 < 1) {
							row2.Partenaire_Nom = null;
						} else {

							tmpContent_tOracleInput_2 = rs_tOracleInput_2
									.getString(1);
							if (tmpContent_tOracleInput_2 != null) {
								row2.Partenaire_Nom = tmpContent_tOracleInput_2;
							} else {
								row2.Partenaire_Nom = null;
							}
						}
						if (colQtyInRs_tOracleInput_2 < 2) {
							row2.nombre_demandes_de_2m = null;
						} else {

							if (rs_tOracleInput_2.getObject(2) != null) {
								row2.nombre_demandes_de_2m = rs_tOracleInput_2
										.getBigDecimal(2);
							} else {

								row2.nombre_demandes_de_2m = null;
							}
						}

						/**
						 * [tOracleInput_2 begin ] stop
						 */

						/**
						 * [tOracleInput_2 main ] start
						 */

						currentComponent = "tOracleInput_2";

						tos_count_tOracleInput_2++;

						/**
						 * [tOracleInput_2 main ] stop
						 */

						/**
						 * [tLogRow_2 main ] start
						 */

						currentComponent = "tLogRow_2";

						// row2
						// row2

						if (execStat) {
							runStat.updateStatOnConnection("row2" + iterateId,
									1, 1);
						}

						// /////////////////////

						strBuffer_tLogRow_2 = new StringBuilder();

						if (row2.Partenaire_Nom != null) { //

							strBuffer_tLogRow_2.append(String
									.valueOf(row2.Partenaire_Nom));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row2.nombre_demandes_de_2m != null) { //

							strBuffer_tLogRow_2
									.append(row2.nombre_demandes_de_2m
											.setScale(
													0,
													java.math.RoundingMode.HALF_UP)
											.toPlainString());

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_2 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_2);
						}
						consoleOut_tLogRow_2.println(strBuffer_tLogRow_2
								.toString());
						consoleOut_tLogRow_2.flush();
						nb_line_tLogRow_2++;
						// ////

						// ////

						// /////////////////////

						tos_count_tLogRow_2++;

						/**
						 * [tLogRow_2 main ] stop
						 */

						/**
						 * [tOracleInput_2 end ] start
						 */

						currentComponent = "tOracleInput_2";

					}
				} finally {
					stmt_tOracleInput_2.close();

					if (conn_tOracleInput_2 != null
							&& !conn_tOracleInput_2.isClosed()) {

						conn_tOracleInput_2.close();

					}

				}

				globalMap.put("tOracleInput_2_NB_LINE", nb_line_tOracleInput_2);

				ok_Hash.put("tOracleInput_2", true);
				end_Hash.put("tOracleInput_2", System.currentTimeMillis());

				/**
				 * [tOracleInput_2 end ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

				// ////
				// ////
				globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				/**
				 * [tLogRow_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tOracleInput_2 finally ] start
				 */

				currentComponent = "tOracleInput_2";

				/**
				 * [tOracleInput_2 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_PROJET_BI_partenaires = new byte[0];
		static byte[] commonByteArray_PROJET_BI_partenaires = new byte[0];

		public String Partenaire_Nom;

		public String getPartenaire_Nom() {
			return this.Partenaire_Nom;
		}

		public BigDecimal nombre_demades_impayees;

		public BigDecimal getNombre_demades_impayees() {
			return this.nombre_demades_impayees;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_BI_partenaires.length) {
					if (length < 1024
							&& commonByteArray_PROJET_BI_partenaires.length == 0) {
						commonByteArray_PROJET_BI_partenaires = new byte[1024];
					} else {
						commonByteArray_PROJET_BI_partenaires = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_BI_partenaires, 0, length);
				strReturn = new String(commonByteArray_PROJET_BI_partenaires,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_BI_partenaires) {

				try {

					int length = 0;

					this.Partenaire_Nom = readString(dis);

					this.nombre_demades_impayees = (BigDecimal) dis
							.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Partenaire_Nom, dos);

				// BigDecimal

				dos.writeObject(this.nombre_demades_impayees);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Partenaire_Nom=" + Partenaire_Nom);
			sb.append(",nombre_demades_impayees="
					+ String.valueOf(nombre_demades_impayees));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tOracleInput_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tLogRow_3 begin ] start
				 */

				ok_Hash.put("tLogRow_3", false);
				start_Hash.put("tLogRow_3", System.currentTimeMillis());

				currentComponent = "tLogRow_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tLogRow_3 = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_3 = "|";
				java.io.PrintStream consoleOut_tLogRow_3 = null;

				StringBuilder strBuffer_tLogRow_3 = null;
				int nb_line_tLogRow_3 = 0;
				// /////////////////////

				/**
				 * [tLogRow_3 begin ] stop
				 */

				/**
				 * [tOracleInput_3 begin ] start
				 */

				ok_Hash.put("tOracleInput_3", false);
				start_Hash.put("tOracleInput_3", System.currentTimeMillis());

				currentComponent = "tOracleInput_3";

				int tos_count_tOracleInput_3 = 0;

				int nb_line_tOracleInput_3 = 0;
				java.sql.Connection conn_tOracleInput_3 = null;
				String driverClass_tOracleInput_3 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_3);

				String url_tOracleInput_3 = null;
				url_tOracleInput_3 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host="
						+ "srvlaboinfo"
						+ ")(port="
						+ "1521"
						+ "))(connect_data=(service_name="
						+ "orcl.intranet.int" + ")))";

				String dbUser_tOracleInput_3 = "BI_2";

				final String decryptedPassword_tOracleInput_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("7acac362d4dfb4fc");

				String dbPwd_tOracleInput_3 = decryptedPassword_tOracleInput_3;

				conn_tOracleInput_3 = java.sql.DriverManager.getConnection(
						url_tOracleInput_3, dbUser_tOracleInput_3,
						dbPwd_tOracleInput_3);
				java.sql.Statement stmtGetTZ_tOracleInput_3 = conn_tOracleInput_3
						.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_3 = stmtGetTZ_tOracleInput_3
						.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_3 = java.util.TimeZone
						.getDefault().getID();
				while (rsGetTZ_tOracleInput_3.next()) {
					sessionTimezone_tOracleInput_3 = rsGetTZ_tOracleInput_3
							.getString(1);
				}
				((oracle.jdbc.OracleConnection) conn_tOracleInput_3)
						.setSessionTimeZone(sessionTimezone_tOracleInput_3);

				java.sql.Statement stmt_tOracleInput_3 = conn_tOracleInput_3
						.createStatement();

				String dbquery_tOracleInput_3 = "SELECT \n  BI_2.PARTENAIRE_PTN.PTN_NOM AS \"Partenaire Nom\", \n  SUM(BI_2.FAIT_PARTENAIRE.NBRE_DEMANDE) AS \"nombre demades impayées\"\n  FROM BI_2.FAIT_PARTENAIRE\n  INNER JOIN BI_2.PARTENAIRE_PTN \n    ON BI_2.PARTENAIRE_PTN.PTN_ID = BI_2.FAIT_PARTENAIRE.ACT_ID\n  WHERE BI_2.FAIT_PARTENAIRE.IMPAYE = 'O'\nGROUP BY  BI_2.PARTENAIRE_PTN.PTN_NOM";

				globalMap.put("tOracleInput_3_QUERY", dbquery_tOracleInput_3);

				java.sql.ResultSet rs_tOracleInput_3 = null;
				try {
					rs_tOracleInput_3 = stmt_tOracleInput_3
							.executeQuery(dbquery_tOracleInput_3);
					java.sql.ResultSetMetaData rsmd_tOracleInput_3 = rs_tOracleInput_3
							.getMetaData();
					int colQtyInRs_tOracleInput_3 = rsmd_tOracleInput_3
							.getColumnCount();

					String tmpContent_tOracleInput_3 = null;

					while (rs_tOracleInput_3.next()) {
						nb_line_tOracleInput_3++;

						if (colQtyInRs_tOracleInput_3 < 1) {
							row3.Partenaire_Nom = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3
									.getString(1);
							if (tmpContent_tOracleInput_3 != null) {
								row3.Partenaire_Nom = tmpContent_tOracleInput_3;
							} else {
								row3.Partenaire_Nom = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 2) {
							row3.nombre_demades_impayees = null;
						} else {

							if (rs_tOracleInput_3.getObject(2) != null) {
								row3.nombre_demades_impayees = rs_tOracleInput_3
										.getBigDecimal(2);
							} else {

								row3.nombre_demades_impayees = null;
							}
						}

						/**
						 * [tOracleInput_3 begin ] stop
						 */

						/**
						 * [tOracleInput_3 main ] start
						 */

						currentComponent = "tOracleInput_3";

						tos_count_tOracleInput_3++;

						/**
						 * [tOracleInput_3 main ] stop
						 */

						/**
						 * [tLogRow_3 main ] start
						 */

						currentComponent = "tLogRow_3";

						// row3
						// row3

						if (execStat) {
							runStat.updateStatOnConnection("row3" + iterateId,
									1, 1);
						}

						// /////////////////////

						strBuffer_tLogRow_3 = new StringBuilder();

						if (row3.Partenaire_Nom != null) { //

							strBuffer_tLogRow_3.append(String
									.valueOf(row3.Partenaire_Nom));

						} //

						strBuffer_tLogRow_3.append("|");

						if (row3.nombre_demades_impayees != null) { //

							strBuffer_tLogRow_3
									.append(row3.nombre_demades_impayees
											.setScale(
													0,
													java.math.RoundingMode.HALF_UP)
											.toPlainString());

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_3 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_3);
						}
						consoleOut_tLogRow_3.println(strBuffer_tLogRow_3
								.toString());
						consoleOut_tLogRow_3.flush();
						nb_line_tLogRow_3++;
						// ////

						// ////

						// /////////////////////

						tos_count_tLogRow_3++;

						/**
						 * [tLogRow_3 main ] stop
						 */

						/**
						 * [tOracleInput_3 end ] start
						 */

						currentComponent = "tOracleInput_3";

					}
				} finally {
					stmt_tOracleInput_3.close();

					if (conn_tOracleInput_3 != null
							&& !conn_tOracleInput_3.isClosed()) {

						conn_tOracleInput_3.close();

					}

				}

				globalMap.put("tOracleInput_3_NB_LINE", nb_line_tOracleInput_3);

				ok_Hash.put("tOracleInput_3", true);
				end_Hash.put("tOracleInput_3", System.currentTimeMillis());

				/**
				 * [tOracleInput_3 end ] stop
				 */

				/**
				 * [tLogRow_3 end ] start
				 */

				currentComponent = "tLogRow_3";

				// ////
				// ////
				globalMap.put("tLogRow_3_NB_LINE", nb_line_tLogRow_3);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tLogRow_3", true);
				end_Hash.put("tLogRow_3", System.currentTimeMillis());

				/**
				 * [tLogRow_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tOracleInput_3 finally ] start
				 */

				currentComponent = "tOracleInput_3";

				/**
				 * [tOracleInput_3 finally ] stop
				 */

				/**
				 * [tLogRow_3 finally ] start
				 */

				currentComponent = "tLogRow_3";

				/**
				 * [tLogRow_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_PROJET_BI_partenaires = new byte[0];
		static byte[] commonByteArray_PROJET_BI_partenaires = new byte[0];

		public String Partenaire_Nom;

		public String getPartenaire_Nom() {
			return this.Partenaire_Nom;
		}

		public BigDecimal chiffre_d_affaires;

		public BigDecimal getChiffre_d_affaires() {
			return this.chiffre_d_affaires;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_BI_partenaires.length) {
					if (length < 1024
							&& commonByteArray_PROJET_BI_partenaires.length == 0) {
						commonByteArray_PROJET_BI_partenaires = new byte[1024];
					} else {
						commonByteArray_PROJET_BI_partenaires = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_BI_partenaires, 0, length);
				strReturn = new String(commonByteArray_PROJET_BI_partenaires,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_BI_partenaires) {

				try {

					int length = 0;

					this.Partenaire_Nom = readString(dis);

					this.chiffre_d_affaires = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Partenaire_Nom, dos);

				// BigDecimal

				dos.writeObject(this.chiffre_d_affaires);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Partenaire_Nom=" + Partenaire_Nom);
			sb.append(",chiffre_d_affaires="
					+ String.valueOf(chiffre_d_affaires));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tOracleInput_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tLogRow_4 begin ] start
				 */

				ok_Hash.put("tLogRow_4", false);
				start_Hash.put("tLogRow_4", System.currentTimeMillis());

				currentComponent = "tLogRow_4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);

					}
				}

				int tos_count_tLogRow_4 = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_4 = "|";
				java.io.PrintStream consoleOut_tLogRow_4 = null;

				StringBuilder strBuffer_tLogRow_4 = null;
				int nb_line_tLogRow_4 = 0;
				// /////////////////////

				/**
				 * [tLogRow_4 begin ] stop
				 */

				/**
				 * [tOracleInput_4 begin ] start
				 */

				ok_Hash.put("tOracleInput_4", false);
				start_Hash.put("tOracleInput_4", System.currentTimeMillis());

				currentComponent = "tOracleInput_4";

				int tos_count_tOracleInput_4 = 0;

				int nb_line_tOracleInput_4 = 0;
				java.sql.Connection conn_tOracleInput_4 = null;
				String driverClass_tOracleInput_4 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_4);

				String url_tOracleInput_4 = null;
				url_tOracleInput_4 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host="
						+ "srvlaboinfo"
						+ ")(port="
						+ "1521"
						+ "))(connect_data=(service_name="
						+ "orcl.intranet.int" + ")))";

				String dbUser_tOracleInput_4 = "BI_2";

				final String decryptedPassword_tOracleInput_4 = routines.system.PasswordEncryptUtil
						.decryptPassword("7acac362d4dfb4fc");

				String dbPwd_tOracleInput_4 = decryptedPassword_tOracleInput_4;

				conn_tOracleInput_4 = java.sql.DriverManager.getConnection(
						url_tOracleInput_4, dbUser_tOracleInput_4,
						dbPwd_tOracleInput_4);
				java.sql.Statement stmtGetTZ_tOracleInput_4 = conn_tOracleInput_4
						.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_4 = stmtGetTZ_tOracleInput_4
						.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_4 = java.util.TimeZone
						.getDefault().getID();
				while (rsGetTZ_tOracleInput_4.next()) {
					sessionTimezone_tOracleInput_4 = rsGetTZ_tOracleInput_4
							.getString(1);
				}
				((oracle.jdbc.OracleConnection) conn_tOracleInput_4)
						.setSessionTimeZone(sessionTimezone_tOracleInput_4);

				java.sql.Statement stmt_tOracleInput_4 = conn_tOracleInput_4
						.createStatement();

				String dbquery_tOracleInput_4 = "SELECT \n  BI_2.PARTENAIRE_PTN.PTN_NOM AS \"Partenaire Nom\", \n  SUM(BI_2.FAIT_PARTENAIRE.MONTANT_DEMANDE) AS \"chiffre d'affaires\"\n  FROM BI_2.FAIT_PARTENAIRE\n  INNER JOIN BI_2.PARTENAIRE_PTN \n    ON BI_2.PARTENAIRE_PTN.PTN_ID = BI_2.FAIT_PARTENAIRE.ACT_ID\nGROUP BY  BI_2.PARTENAIRE_PTN.PTN_NOM";

				globalMap.put("tOracleInput_4_QUERY", dbquery_tOracleInput_4);

				java.sql.ResultSet rs_tOracleInput_4 = null;
				try {
					rs_tOracleInput_4 = stmt_tOracleInput_4
							.executeQuery(dbquery_tOracleInput_4);
					java.sql.ResultSetMetaData rsmd_tOracleInput_4 = rs_tOracleInput_4
							.getMetaData();
					int colQtyInRs_tOracleInput_4 = rsmd_tOracleInput_4
							.getColumnCount();

					String tmpContent_tOracleInput_4 = null;

					while (rs_tOracleInput_4.next()) {
						nb_line_tOracleInput_4++;

						if (colQtyInRs_tOracleInput_4 < 1) {
							row4.Partenaire_Nom = null;
						} else {

							tmpContent_tOracleInput_4 = rs_tOracleInput_4
									.getString(1);
							if (tmpContent_tOracleInput_4 != null) {
								row4.Partenaire_Nom = tmpContent_tOracleInput_4;
							} else {
								row4.Partenaire_Nom = null;
							}
						}
						if (colQtyInRs_tOracleInput_4 < 2) {
							row4.chiffre_d_affaires = null;
						} else {

							if (rs_tOracleInput_4.getObject(2) != null) {
								row4.chiffre_d_affaires = rs_tOracleInput_4
										.getBigDecimal(2);
							} else {

								row4.chiffre_d_affaires = null;
							}
						}

						/**
						 * [tOracleInput_4 begin ] stop
						 */

						/**
						 * [tOracleInput_4 main ] start
						 */

						currentComponent = "tOracleInput_4";

						tos_count_tOracleInput_4++;

						/**
						 * [tOracleInput_4 main ] stop
						 */

						/**
						 * [tLogRow_4 main ] start
						 */

						currentComponent = "tLogRow_4";

						// row4
						// row4

						if (execStat) {
							runStat.updateStatOnConnection("row4" + iterateId,
									1, 1);
						}

						// /////////////////////

						strBuffer_tLogRow_4 = new StringBuilder();

						if (row4.Partenaire_Nom != null) { //

							strBuffer_tLogRow_4.append(String
									.valueOf(row4.Partenaire_Nom));

						} //

						strBuffer_tLogRow_4.append("|");

						if (row4.chiffre_d_affaires != null) { //

							strBuffer_tLogRow_4
									.append(row4.chiffre_d_affaires.setScale(0,
											java.math.RoundingMode.HALF_UP)
											.toPlainString());

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_4 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_4 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_4);
						}
						consoleOut_tLogRow_4.println(strBuffer_tLogRow_4
								.toString());
						consoleOut_tLogRow_4.flush();
						nb_line_tLogRow_4++;
						// ////

						// ////

						// /////////////////////

						tos_count_tLogRow_4++;

						/**
						 * [tLogRow_4 main ] stop
						 */

						/**
						 * [tOracleInput_4 end ] start
						 */

						currentComponent = "tOracleInput_4";

					}
				} finally {
					stmt_tOracleInput_4.close();

					if (conn_tOracleInput_4 != null
							&& !conn_tOracleInput_4.isClosed()) {

						conn_tOracleInput_4.close();

					}

				}

				globalMap.put("tOracleInput_4_NB_LINE", nb_line_tOracleInput_4);

				ok_Hash.put("tOracleInput_4", true);
				end_Hash.put("tOracleInput_4", System.currentTimeMillis());

				/**
				 * [tOracleInput_4 end ] stop
				 */

				/**
				 * [tLogRow_4 end ] start
				 */

				currentComponent = "tLogRow_4";

				// ////
				// ////
				globalMap.put("tLogRow_4_NB_LINE", nb_line_tLogRow_4);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tLogRow_4", true);
				end_Hash.put("tLogRow_4", System.currentTimeMillis());

				/**
				 * [tLogRow_4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tOracleInput_4 finally ] start
				 */

				currentComponent = "tOracleInput_4";

				/**
				 * [tOracleInput_4 finally ] stop
				 */

				/**
				 * [tLogRow_4 finally ] start
				 */

				currentComponent = "tLogRow_4";

				/**
				 * [tLogRow_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_PROJET_BI_partenaires = new byte[0];
		static byte[] commonByteArray_PROJET_BI_partenaires = new byte[0];

		public String Partenaire_Nom;

		public String getPartenaire_Nom() {
			return this.Partenaire_Nom;
		}

		public BigDecimal nombre_demandes_cloturees;

		public BigDecimal getNombre_demandes_cloturees() {
			return this.nombre_demandes_cloturees;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_BI_partenaires.length) {
					if (length < 1024
							&& commonByteArray_PROJET_BI_partenaires.length == 0) {
						commonByteArray_PROJET_BI_partenaires = new byte[1024];
					} else {
						commonByteArray_PROJET_BI_partenaires = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_BI_partenaires, 0, length);
				strReturn = new String(commonByteArray_PROJET_BI_partenaires,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_BI_partenaires) {

				try {

					int length = 0;

					this.Partenaire_Nom = readString(dis);

					this.nombre_demandes_cloturees = (BigDecimal) dis
							.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Partenaire_Nom, dos);

				// BigDecimal

				dos.writeObject(this.nombre_demandes_cloturees);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Partenaire_Nom=" + Partenaire_Nom);
			sb.append(",nombre_demandes_cloturees="
					+ String.valueOf(nombre_demandes_cloturees));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tOracleInput_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();

				/**
				 * [tLogRow_5 begin ] start
				 */

				ok_Hash.put("tLogRow_5", false);
				start_Hash.put("tLogRow_5", System.currentTimeMillis());

				currentComponent = "tLogRow_5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);

					}
				}

				int tos_count_tLogRow_5 = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_5 = "|";
				java.io.PrintStream consoleOut_tLogRow_5 = null;

				StringBuilder strBuffer_tLogRow_5 = null;
				int nb_line_tLogRow_5 = 0;
				// /////////////////////

				/**
				 * [tLogRow_5 begin ] stop
				 */

				/**
				 * [tOracleInput_5 begin ] start
				 */

				ok_Hash.put("tOracleInput_5", false);
				start_Hash.put("tOracleInput_5", System.currentTimeMillis());

				currentComponent = "tOracleInput_5";

				int tos_count_tOracleInput_5 = 0;

				int nb_line_tOracleInput_5 = 0;
				java.sql.Connection conn_tOracleInput_5 = null;
				String driverClass_tOracleInput_5 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_5);

				String url_tOracleInput_5 = null;
				url_tOracleInput_5 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host="
						+ "srvlaboinfo"
						+ ")(port="
						+ "1521"
						+ "))(connect_data=(service_name="
						+ "orcl.intranet.int" + ")))";

				String dbUser_tOracleInput_5 = "BI_2";

				final String decryptedPassword_tOracleInput_5 = routines.system.PasswordEncryptUtil
						.decryptPassword("7acac362d4dfb4fc");

				String dbPwd_tOracleInput_5 = decryptedPassword_tOracleInput_5;

				conn_tOracleInput_5 = java.sql.DriverManager.getConnection(
						url_tOracleInput_5, dbUser_tOracleInput_5,
						dbPwd_tOracleInput_5);
				java.sql.Statement stmtGetTZ_tOracleInput_5 = conn_tOracleInput_5
						.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_5 = stmtGetTZ_tOracleInput_5
						.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_5 = java.util.TimeZone
						.getDefault().getID();
				while (rsGetTZ_tOracleInput_5.next()) {
					sessionTimezone_tOracleInput_5 = rsGetTZ_tOracleInput_5
							.getString(1);
				}
				((oracle.jdbc.OracleConnection) conn_tOracleInput_5)
						.setSessionTimeZone(sessionTimezone_tOracleInput_5);

				java.sql.Statement stmt_tOracleInput_5 = conn_tOracleInput_5
						.createStatement();

				String dbquery_tOracleInput_5 = "SELECT \n  BI_2.PARTENAIRE_PTN.PTN_NOM AS \"Partenaire Nom\", \n  SUM(BI_2.FAIT_PARTENAIRE.NBRE_DEMANDE) AS \"nombre demandes cloturées\"\n  FROM BI_2.FAIT_PARTENAIRE\n  INNER JOIN BI_2.PARTENAIRE_PTN \n    ON BI_2.PARTENAIRE_PTN.PTN_ID = BI_2.FAIT_PARTENAIRE.ACT_ID\n  WHERE BI_2.FAIT_PARTENAIRE.TERME = 'ECHU'\nGROUP BY  BI_2.PARTENAIRE_PTN.PTN_NOM";

				globalMap.put("tOracleInput_5_QUERY", dbquery_tOracleInput_5);

				java.sql.ResultSet rs_tOracleInput_5 = null;
				try {
					rs_tOracleInput_5 = stmt_tOracleInput_5
							.executeQuery(dbquery_tOracleInput_5);
					java.sql.ResultSetMetaData rsmd_tOracleInput_5 = rs_tOracleInput_5
							.getMetaData();
					int colQtyInRs_tOracleInput_5 = rsmd_tOracleInput_5
							.getColumnCount();

					String tmpContent_tOracleInput_5 = null;

					while (rs_tOracleInput_5.next()) {
						nb_line_tOracleInput_5++;

						if (colQtyInRs_tOracleInput_5 < 1) {
							row5.Partenaire_Nom = null;
						} else {

							tmpContent_tOracleInput_5 = rs_tOracleInput_5
									.getString(1);
							if (tmpContent_tOracleInput_5 != null) {
								row5.Partenaire_Nom = tmpContent_tOracleInput_5;
							} else {
								row5.Partenaire_Nom = null;
							}
						}
						if (colQtyInRs_tOracleInput_5 < 2) {
							row5.nombre_demandes_cloturees = null;
						} else {

							if (rs_tOracleInput_5.getObject(2) != null) {
								row5.nombre_demandes_cloturees = rs_tOracleInput_5
										.getBigDecimal(2);
							} else {

								row5.nombre_demandes_cloturees = null;
							}
						}

						/**
						 * [tOracleInput_5 begin ] stop
						 */

						/**
						 * [tOracleInput_5 main ] start
						 */

						currentComponent = "tOracleInput_5";

						tos_count_tOracleInput_5++;

						/**
						 * [tOracleInput_5 main ] stop
						 */

						/**
						 * [tLogRow_5 main ] start
						 */

						currentComponent = "tLogRow_5";

						// row5
						// row5

						if (execStat) {
							runStat.updateStatOnConnection("row5" + iterateId,
									1, 1);
						}

						// /////////////////////

						strBuffer_tLogRow_5 = new StringBuilder();

						if (row5.Partenaire_Nom != null) { //

							strBuffer_tLogRow_5.append(String
									.valueOf(row5.Partenaire_Nom));

						} //

						strBuffer_tLogRow_5.append("|");

						if (row5.nombre_demandes_cloturees != null) { //

							strBuffer_tLogRow_5
									.append(row5.nombre_demandes_cloturees
											.setScale(
													0,
													java.math.RoundingMode.HALF_UP)
											.toPlainString());

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_5 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_5 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_5);
						}
						consoleOut_tLogRow_5.println(strBuffer_tLogRow_5
								.toString());
						consoleOut_tLogRow_5.flush();
						nb_line_tLogRow_5++;
						// ////

						// ////

						// /////////////////////

						tos_count_tLogRow_5++;

						/**
						 * [tLogRow_5 main ] stop
						 */

						/**
						 * [tOracleInput_5 end ] start
						 */

						currentComponent = "tOracleInput_5";

					}
				} finally {
					stmt_tOracleInput_5.close();

					if (conn_tOracleInput_5 != null
							&& !conn_tOracleInput_5.isClosed()) {

						conn_tOracleInput_5.close();

					}

				}

				globalMap.put("tOracleInput_5_NB_LINE", nb_line_tOracleInput_5);

				ok_Hash.put("tOracleInput_5", true);
				end_Hash.put("tOracleInput_5", System.currentTimeMillis());

				/**
				 * [tOracleInput_5 end ] stop
				 */

				/**
				 * [tLogRow_5 end ] start
				 */

				currentComponent = "tLogRow_5";

				// ////
				// ////
				globalMap.put("tLogRow_5_NB_LINE", nb_line_tLogRow_5);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tLogRow_5", true);
				end_Hash.put("tLogRow_5", System.currentTimeMillis());

				/**
				 * [tLogRow_5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tOracleInput_5 finally ] start
				 */

				currentComponent = "tOracleInput_5";

				/**
				 * [tOracleInput_5 finally ] stop
				 */

				/**
				 * [tLogRow_5 finally ] start
				 */

				currentComponent = "tLogRow_5";

				/**
				 * [tLogRow_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_PROJET_BI_partenaires = new byte[0];
		static byte[] commonByteArray_PROJET_BI_partenaires = new byte[0];

		public String Partenaire_Nom;

		public String getPartenaire_Nom() {
			return this.Partenaire_Nom;
		}

		public BigDecimal montant_de_CRD_demandes;

		public BigDecimal getMontant_de_CRD_demandes() {
			return this.montant_de_CRD_demandes;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_BI_partenaires.length) {
					if (length < 1024
							&& commonByteArray_PROJET_BI_partenaires.length == 0) {
						commonByteArray_PROJET_BI_partenaires = new byte[1024];
					} else {
						commonByteArray_PROJET_BI_partenaires = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_BI_partenaires, 0, length);
				strReturn = new String(commonByteArray_PROJET_BI_partenaires,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_BI_partenaires) {

				try {

					int length = 0;

					this.Partenaire_Nom = readString(dis);

					this.montant_de_CRD_demandes = (BigDecimal) dis
							.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Partenaire_Nom, dos);

				// BigDecimal

				dos.writeObject(this.montant_de_CRD_demandes);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Partenaire_Nom=" + Partenaire_Nom);
			sb.append(",montant_de_CRD_demandes="
					+ String.valueOf(montant_de_CRD_demandes));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tOracleInput_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tLogRow_6 begin ] start
				 */

				ok_Hash.put("tLogRow_6", false);
				start_Hash.put("tLogRow_6", System.currentTimeMillis());

				currentComponent = "tLogRow_6";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);

					}
				}

				int tos_count_tLogRow_6 = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_6 = "|";
				java.io.PrintStream consoleOut_tLogRow_6 = null;

				StringBuilder strBuffer_tLogRow_6 = null;
				int nb_line_tLogRow_6 = 0;
				// /////////////////////

				/**
				 * [tLogRow_6 begin ] stop
				 */

				/**
				 * [tOracleInput_6 begin ] start
				 */

				ok_Hash.put("tOracleInput_6", false);
				start_Hash.put("tOracleInput_6", System.currentTimeMillis());

				currentComponent = "tOracleInput_6";

				int tos_count_tOracleInput_6 = 0;

				int nb_line_tOracleInput_6 = 0;
				java.sql.Connection conn_tOracleInput_6 = null;
				String driverClass_tOracleInput_6 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_6);

				String url_tOracleInput_6 = null;
				url_tOracleInput_6 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host="
						+ "srvlaboinfo"
						+ ")(port="
						+ "1521"
						+ "))(connect_data=(service_name="
						+ "orcl.intranet.int" + ")))";

				String dbUser_tOracleInput_6 = "BI_2";

				final String decryptedPassword_tOracleInput_6 = routines.system.PasswordEncryptUtil
						.decryptPassword("7acac362d4dfb4fc");

				String dbPwd_tOracleInput_6 = decryptedPassword_tOracleInput_6;

				conn_tOracleInput_6 = java.sql.DriverManager.getConnection(
						url_tOracleInput_6, dbUser_tOracleInput_6,
						dbPwd_tOracleInput_6);
				java.sql.Statement stmtGetTZ_tOracleInput_6 = conn_tOracleInput_6
						.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_6 = stmtGetTZ_tOracleInput_6
						.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_6 = java.util.TimeZone
						.getDefault().getID();
				while (rsGetTZ_tOracleInput_6.next()) {
					sessionTimezone_tOracleInput_6 = rsGetTZ_tOracleInput_6
							.getString(1);
				}
				((oracle.jdbc.OracleConnection) conn_tOracleInput_6)
						.setSessionTimeZone(sessionTimezone_tOracleInput_6);

				java.sql.Statement stmt_tOracleInput_6 = conn_tOracleInput_6
						.createStatement();

				String dbquery_tOracleInput_6 = "SELECT \n  BI_2.PARTENAIRE_PTN.PTN_NOM AS \"Partenaire Nom\", \n  SUM(BI_2.FAIT_PARTENAIRE.CRD_DEMANDE) AS \"montant de CRD demandes\"\n  FROM BI_2.FAIT_PARTENAIRE\n  INNER JOIN BI_2.PARTENAIRE_PTN \n    ON BI_2.PARTENAIRE_PTN.PTN_ID = BI_2.FAIT_PARTENAIRE.ACT_ID\nGROUP BY  BI_2.PARTENAIRE_PTN.PTN_NOM";

				globalMap.put("tOracleInput_6_QUERY", dbquery_tOracleInput_6);

				java.sql.ResultSet rs_tOracleInput_6 = null;
				try {
					rs_tOracleInput_6 = stmt_tOracleInput_6
							.executeQuery(dbquery_tOracleInput_6);
					java.sql.ResultSetMetaData rsmd_tOracleInput_6 = rs_tOracleInput_6
							.getMetaData();
					int colQtyInRs_tOracleInput_6 = rsmd_tOracleInput_6
							.getColumnCount();

					String tmpContent_tOracleInput_6 = null;

					while (rs_tOracleInput_6.next()) {
						nb_line_tOracleInput_6++;

						if (colQtyInRs_tOracleInput_6 < 1) {
							row6.Partenaire_Nom = null;
						} else {

							tmpContent_tOracleInput_6 = rs_tOracleInput_6
									.getString(1);
							if (tmpContent_tOracleInput_6 != null) {
								row6.Partenaire_Nom = tmpContent_tOracleInput_6;
							} else {
								row6.Partenaire_Nom = null;
							}
						}
						if (colQtyInRs_tOracleInput_6 < 2) {
							row6.montant_de_CRD_demandes = null;
						} else {

							if (rs_tOracleInput_6.getObject(2) != null) {
								row6.montant_de_CRD_demandes = rs_tOracleInput_6
										.getBigDecimal(2);
							} else {

								row6.montant_de_CRD_demandes = null;
							}
						}

						/**
						 * [tOracleInput_6 begin ] stop
						 */

						/**
						 * [tOracleInput_6 main ] start
						 */

						currentComponent = "tOracleInput_6";

						tos_count_tOracleInput_6++;

						/**
						 * [tOracleInput_6 main ] stop
						 */

						/**
						 * [tLogRow_6 main ] start
						 */

						currentComponent = "tLogRow_6";

						// row6
						// row6

						if (execStat) {
							runStat.updateStatOnConnection("row6" + iterateId,
									1, 1);
						}

						// /////////////////////

						strBuffer_tLogRow_6 = new StringBuilder();

						if (row6.Partenaire_Nom != null) { //

							strBuffer_tLogRow_6.append(String
									.valueOf(row6.Partenaire_Nom));

						} //

						strBuffer_tLogRow_6.append("|");

						if (row6.montant_de_CRD_demandes != null) { //

							strBuffer_tLogRow_6
									.append(row6.montant_de_CRD_demandes
											.setScale(
													0,
													java.math.RoundingMode.HALF_UP)
											.toPlainString());

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_6 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_6 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_6);
						}
						consoleOut_tLogRow_6.println(strBuffer_tLogRow_6
								.toString());
						consoleOut_tLogRow_6.flush();
						nb_line_tLogRow_6++;
						// ////

						// ////

						// /////////////////////

						tos_count_tLogRow_6++;

						/**
						 * [tLogRow_6 main ] stop
						 */

						/**
						 * [tOracleInput_6 end ] start
						 */

						currentComponent = "tOracleInput_6";

					}
				} finally {
					stmt_tOracleInput_6.close();

					if (conn_tOracleInput_6 != null
							&& !conn_tOracleInput_6.isClosed()) {

						conn_tOracleInput_6.close();

					}

				}

				globalMap.put("tOracleInput_6_NB_LINE", nb_line_tOracleInput_6);

				ok_Hash.put("tOracleInput_6", true);
				end_Hash.put("tOracleInput_6", System.currentTimeMillis());

				/**
				 * [tOracleInput_6 end ] stop
				 */

				/**
				 * [tLogRow_6 end ] start
				 */

				currentComponent = "tLogRow_6";

				// ////
				// ////
				globalMap.put("tLogRow_6_NB_LINE", nb_line_tLogRow_6);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row6" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tLogRow_6", true);
				end_Hash.put("tLogRow_6", System.currentTimeMillis());

				/**
				 * [tLogRow_6 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tOracleInput_6 finally ] start
				 */

				currentComponent = "tOracleInput_6";

				/**
				 * [tOracleInput_6 finally ] stop
				 */

				/**
				 * [tLogRow_6 finally ] start
				 */

				currentComponent = "tLogRow_6";

				/**
				 * [tLogRow_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_PROJET_BI_partenaires = new byte[0];
		static byte[] commonByteArray_PROJET_BI_partenaires = new byte[0];

		public String Partenaire_Nom;

		public String getPartenaire_Nom() {
			return this.Partenaire_Nom;
		}

		public BigDecimal chiffre_d_affaire_cet_an;

		public BigDecimal getChiffre_d_affaire_cet_an() {
			return this.chiffre_d_affaire_cet_an;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_BI_partenaires.length) {
					if (length < 1024
							&& commonByteArray_PROJET_BI_partenaires.length == 0) {
						commonByteArray_PROJET_BI_partenaires = new byte[1024];
					} else {
						commonByteArray_PROJET_BI_partenaires = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_BI_partenaires, 0, length);
				strReturn = new String(commonByteArray_PROJET_BI_partenaires,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_BI_partenaires) {

				try {

					int length = 0;

					this.Partenaire_Nom = readString(dis);

					this.chiffre_d_affaire_cet_an = (BigDecimal) dis
							.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Partenaire_Nom, dos);

				// BigDecimal

				dos.writeObject(this.chiffre_d_affaire_cet_an);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Partenaire_Nom=" + Partenaire_Nom);
			sb.append(",chiffre_d_affaire_cet_an="
					+ String.valueOf(chiffre_d_affaire_cet_an));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tOracleInput_7Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleInput_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();

				/**
				 * [tLogRow_7 begin ] start
				 */

				ok_Hash.put("tLogRow_7", false);
				start_Hash.put("tLogRow_7", System.currentTimeMillis());

				currentComponent = "tLogRow_7";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);

					}
				}

				int tos_count_tLogRow_7 = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_7 = "|";
				java.io.PrintStream consoleOut_tLogRow_7 = null;

				StringBuilder strBuffer_tLogRow_7 = null;
				int nb_line_tLogRow_7 = 0;
				// /////////////////////

				/**
				 * [tLogRow_7 begin ] stop
				 */

				/**
				 * [tOracleInput_7 begin ] start
				 */

				ok_Hash.put("tOracleInput_7", false);
				start_Hash.put("tOracleInput_7", System.currentTimeMillis());

				currentComponent = "tOracleInput_7";

				int tos_count_tOracleInput_7 = 0;

				int nb_line_tOracleInput_7 = 0;
				java.sql.Connection conn_tOracleInput_7 = null;
				String driverClass_tOracleInput_7 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_7);

				String url_tOracleInput_7 = null;
				url_tOracleInput_7 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host="
						+ "srvlaboinfo"
						+ ")(port="
						+ "1521"
						+ "))(connect_data=(service_name="
						+ "orcl.intranet.int" + ")))";

				String dbUser_tOracleInput_7 = "BI_2";

				final String decryptedPassword_tOracleInput_7 = routines.system.PasswordEncryptUtil
						.decryptPassword("7acac362d4dfb4fc");

				String dbPwd_tOracleInput_7 = decryptedPassword_tOracleInput_7;

				conn_tOracleInput_7 = java.sql.DriverManager.getConnection(
						url_tOracleInput_7, dbUser_tOracleInput_7,
						dbPwd_tOracleInput_7);
				java.sql.Statement stmtGetTZ_tOracleInput_7 = conn_tOracleInput_7
						.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_7 = stmtGetTZ_tOracleInput_7
						.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_7 = java.util.TimeZone
						.getDefault().getID();
				while (rsGetTZ_tOracleInput_7.next()) {
					sessionTimezone_tOracleInput_7 = rsGetTZ_tOracleInput_7
							.getString(1);
				}
				((oracle.jdbc.OracleConnection) conn_tOracleInput_7)
						.setSessionTimeZone(sessionTimezone_tOracleInput_7);

				java.sql.Statement stmt_tOracleInput_7 = conn_tOracleInput_7
						.createStatement();

				String dbquery_tOracleInput_7 = "SELECT \n  BI_2.PARTENAIRE_PTN.PTN_NOM AS \"Partenaire Nom\", \n  SUM(BI_2.FAIT_PARTENAIRE.MONTANT_DEMANDE) AS \"chiffre d'affaire cet an\"\n  FROM BI_2.FAIT_PARTENAIRE\n  INNER JOIN BI_2.PARTENAIRE_PTN \n    ON BI_2.PARTENAIRE_PTN.PTN_ID = BI_2.FAIT_PARTENAIRE.ACT_ID\n  WHERE BI_2.FAIT_PARTENAIRE.DATE_DTE_ID IN (\n    SELECT BI_2.DATE_DTE.DTE_ID \n    FROM BI_2.DATE_DTE\n    WHERE BI_2.DATE_DTE.DTE_YEAR = EXTRACT(year FROM CURRENT_DATE))\nGROUP BY  BI_2.PARTENAIRE_PTN.PTN_NOM";

				globalMap.put("tOracleInput_7_QUERY", dbquery_tOracleInput_7);

				java.sql.ResultSet rs_tOracleInput_7 = null;
				try {
					rs_tOracleInput_7 = stmt_tOracleInput_7
							.executeQuery(dbquery_tOracleInput_7);
					java.sql.ResultSetMetaData rsmd_tOracleInput_7 = rs_tOracleInput_7
							.getMetaData();
					int colQtyInRs_tOracleInput_7 = rsmd_tOracleInput_7
							.getColumnCount();

					String tmpContent_tOracleInput_7 = null;

					while (rs_tOracleInput_7.next()) {
						nb_line_tOracleInput_7++;

						if (colQtyInRs_tOracleInput_7 < 1) {
							row7.Partenaire_Nom = null;
						} else {

							tmpContent_tOracleInput_7 = rs_tOracleInput_7
									.getString(1);
							if (tmpContent_tOracleInput_7 != null) {
								row7.Partenaire_Nom = tmpContent_tOracleInput_7;
							} else {
								row7.Partenaire_Nom = null;
							}
						}
						if (colQtyInRs_tOracleInput_7 < 2) {
							row7.chiffre_d_affaire_cet_an = null;
						} else {

							if (rs_tOracleInput_7.getObject(2) != null) {
								row7.chiffre_d_affaire_cet_an = rs_tOracleInput_7
										.getBigDecimal(2);
							} else {

								row7.chiffre_d_affaire_cet_an = null;
							}
						}

						/**
						 * [tOracleInput_7 begin ] stop
						 */

						/**
						 * [tOracleInput_7 main ] start
						 */

						currentComponent = "tOracleInput_7";

						tos_count_tOracleInput_7++;

						/**
						 * [tOracleInput_7 main ] stop
						 */

						/**
						 * [tLogRow_7 main ] start
						 */

						currentComponent = "tLogRow_7";

						// row7
						// row7

						if (execStat) {
							runStat.updateStatOnConnection("row7" + iterateId,
									1, 1);
						}

						// /////////////////////

						strBuffer_tLogRow_7 = new StringBuilder();

						if (row7.Partenaire_Nom != null) { //

							strBuffer_tLogRow_7.append(String
									.valueOf(row7.Partenaire_Nom));

						} //

						strBuffer_tLogRow_7.append("|");

						if (row7.chiffre_d_affaire_cet_an != null) { //

							strBuffer_tLogRow_7
									.append(row7.chiffre_d_affaire_cet_an
											.setScale(
													0,
													java.math.RoundingMode.HALF_UP)
											.toPlainString());

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_7 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_7 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_7);
						}
						consoleOut_tLogRow_7.println(strBuffer_tLogRow_7
								.toString());
						consoleOut_tLogRow_7.flush();
						nb_line_tLogRow_7++;
						// ////

						// ////

						// /////////////////////

						tos_count_tLogRow_7++;

						/**
						 * [tLogRow_7 main ] stop
						 */

						/**
						 * [tOracleInput_7 end ] start
						 */

						currentComponent = "tOracleInput_7";

					}
				} finally {
					stmt_tOracleInput_7.close();

					if (conn_tOracleInput_7 != null
							&& !conn_tOracleInput_7.isClosed()) {

						conn_tOracleInput_7.close();

					}

				}

				globalMap.put("tOracleInput_7_NB_LINE", nb_line_tOracleInput_7);

				ok_Hash.put("tOracleInput_7", true);
				end_Hash.put("tOracleInput_7", System.currentTimeMillis());

				/**
				 * [tOracleInput_7 end ] stop
				 */

				/**
				 * [tLogRow_7 end ] start
				 */

				currentComponent = "tLogRow_7";

				// ////
				// ////
				globalMap.put("tLogRow_7_NB_LINE", nb_line_tLogRow_7);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row7" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tLogRow_7", true);
				end_Hash.put("tLogRow_7", System.currentTimeMillis());

				/**
				 * [tLogRow_7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tOracleInput_7 finally ] start
				 */

				currentComponent = "tOracleInput_7";

				/**
				 * [tOracleInput_7 finally ] stop
				 */

				/**
				 * [tLogRow_7 finally ] start
				 */

				currentComponent = "tLogRow_7";

				/**
				 * [tLogRow_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tOracleInput_7_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_PROJET_BI_partenaires = new byte[0];
		static byte[] commonByteArray_PROJET_BI_partenaires = new byte[0];

		public String Partenaire_Nom;

		public String getPartenaire_Nom() {
			return this.Partenaire_Nom;
		}

		public BigDecimal chiffre_d_affaire_ce_mois;

		public BigDecimal getChiffre_d_affaire_ce_mois() {
			return this.chiffre_d_affaire_ce_mois;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_BI_partenaires.length) {
					if (length < 1024
							&& commonByteArray_PROJET_BI_partenaires.length == 0) {
						commonByteArray_PROJET_BI_partenaires = new byte[1024];
					} else {
						commonByteArray_PROJET_BI_partenaires = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_BI_partenaires, 0, length);
				strReturn = new String(commonByteArray_PROJET_BI_partenaires,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_BI_partenaires) {

				try {

					int length = 0;

					this.Partenaire_Nom = readString(dis);

					this.chiffre_d_affaire_ce_mois = (BigDecimal) dis
							.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Partenaire_Nom, dos);

				// BigDecimal

				dos.writeObject(this.chiffre_d_affaire_ce_mois);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Partenaire_Nom=" + Partenaire_Nom);
			sb.append(",chiffre_d_affaire_ce_mois="
					+ String.valueOf(chiffre_d_affaire_ce_mois));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tOracleInput_8Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleInput_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row8Struct row8 = new row8Struct();

				/**
				 * [tLogRow_8 begin ] start
				 */

				ok_Hash.put("tLogRow_8", false);
				start_Hash.put("tLogRow_8", System.currentTimeMillis());

				currentComponent = "tLogRow_8";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row8" + iterateId, 0, 0);

					}
				}

				int tos_count_tLogRow_8 = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_8 = "|";
				java.io.PrintStream consoleOut_tLogRow_8 = null;

				StringBuilder strBuffer_tLogRow_8 = null;
				int nb_line_tLogRow_8 = 0;
				// /////////////////////

				/**
				 * [tLogRow_8 begin ] stop
				 */

				/**
				 * [tOracleInput_8 begin ] start
				 */

				ok_Hash.put("tOracleInput_8", false);
				start_Hash.put("tOracleInput_8", System.currentTimeMillis());

				currentComponent = "tOracleInput_8";

				int tos_count_tOracleInput_8 = 0;

				int nb_line_tOracleInput_8 = 0;
				java.sql.Connection conn_tOracleInput_8 = null;
				String driverClass_tOracleInput_8 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_8);

				String url_tOracleInput_8 = null;
				url_tOracleInput_8 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host="
						+ "srvlaboinfo"
						+ ")(port="
						+ "1521"
						+ "))(connect_data=(service_name="
						+ "orcl.intranet.int" + ")))";

				String dbUser_tOracleInput_8 = "BI_2";

				final String decryptedPassword_tOracleInput_8 = routines.system.PasswordEncryptUtil
						.decryptPassword("7acac362d4dfb4fc");

				String dbPwd_tOracleInput_8 = decryptedPassword_tOracleInput_8;

				conn_tOracleInput_8 = java.sql.DriverManager.getConnection(
						url_tOracleInput_8, dbUser_tOracleInput_8,
						dbPwd_tOracleInput_8);
				java.sql.Statement stmtGetTZ_tOracleInput_8 = conn_tOracleInput_8
						.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_8 = stmtGetTZ_tOracleInput_8
						.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_8 = java.util.TimeZone
						.getDefault().getID();
				while (rsGetTZ_tOracleInput_8.next()) {
					sessionTimezone_tOracleInput_8 = rsGetTZ_tOracleInput_8
							.getString(1);
				}
				((oracle.jdbc.OracleConnection) conn_tOracleInput_8)
						.setSessionTimeZone(sessionTimezone_tOracleInput_8);

				java.sql.Statement stmt_tOracleInput_8 = conn_tOracleInput_8
						.createStatement();

				String dbquery_tOracleInput_8 = "SELECT \n  BI_2.PARTENAIRE_PTN.PTN_NOM AS \"Partenaire Nom\", \n  SUM(BI_2.FAIT_PARTENAIRE.MONTANT_DEMANDE) AS \"chiffre d'affaire ce mois\"\n  FROM BI_2.FAIT_PARTENAIRE\n  INNER JOIN BI_2.PARTENAIRE_PTN \n    ON BI_2.PARTENAIRE_PTN.PTN_ID = BI_2.FAIT_PARTENAIRE.ACT_ID\n  WHERE BI_2.FAIT_PARTENAIRE.DATE_DTE_ID IN (\n    SELECT BI_2.DATE_DTE.DTE_ID \n    FROM BI_2.DATE_DTE\n    WHERE BI_2.DATE_DTE.DTE_MONTH = EXTRACT(month FROM CURRENT_DATE))\nGROUP BY  BI_2.PARTENAIRE_PTN.PTN_NOM";

				globalMap.put("tOracleInput_8_QUERY", dbquery_tOracleInput_8);

				java.sql.ResultSet rs_tOracleInput_8 = null;
				try {
					rs_tOracleInput_8 = stmt_tOracleInput_8
							.executeQuery(dbquery_tOracleInput_8);
					java.sql.ResultSetMetaData rsmd_tOracleInput_8 = rs_tOracleInput_8
							.getMetaData();
					int colQtyInRs_tOracleInput_8 = rsmd_tOracleInput_8
							.getColumnCount();

					String tmpContent_tOracleInput_8 = null;

					while (rs_tOracleInput_8.next()) {
						nb_line_tOracleInput_8++;

						if (colQtyInRs_tOracleInput_8 < 1) {
							row8.Partenaire_Nom = null;
						} else {

							tmpContent_tOracleInput_8 = rs_tOracleInput_8
									.getString(1);
							if (tmpContent_tOracleInput_8 != null) {
								row8.Partenaire_Nom = tmpContent_tOracleInput_8;
							} else {
								row8.Partenaire_Nom = null;
							}
						}
						if (colQtyInRs_tOracleInput_8 < 2) {
							row8.chiffre_d_affaire_ce_mois = null;
						} else {

							if (rs_tOracleInput_8.getObject(2) != null) {
								row8.chiffre_d_affaire_ce_mois = rs_tOracleInput_8
										.getBigDecimal(2);
							} else {

								row8.chiffre_d_affaire_ce_mois = null;
							}
						}

						/**
						 * [tOracleInput_8 begin ] stop
						 */

						/**
						 * [tOracleInput_8 main ] start
						 */

						currentComponent = "tOracleInput_8";

						tos_count_tOracleInput_8++;

						/**
						 * [tOracleInput_8 main ] stop
						 */

						/**
						 * [tLogRow_8 main ] start
						 */

						currentComponent = "tLogRow_8";

						// row8
						// row8

						if (execStat) {
							runStat.updateStatOnConnection("row8" + iterateId,
									1, 1);
						}

						// /////////////////////

						strBuffer_tLogRow_8 = new StringBuilder();

						if (row8.Partenaire_Nom != null) { //

							strBuffer_tLogRow_8.append(String
									.valueOf(row8.Partenaire_Nom));

						} //

						strBuffer_tLogRow_8.append("|");

						if (row8.chiffre_d_affaire_ce_mois != null) { //

							strBuffer_tLogRow_8
									.append(row8.chiffre_d_affaire_ce_mois
											.setScale(
													0,
													java.math.RoundingMode.HALF_UP)
											.toPlainString());

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_8 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_8 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_8);
						}
						consoleOut_tLogRow_8.println(strBuffer_tLogRow_8
								.toString());
						consoleOut_tLogRow_8.flush();
						nb_line_tLogRow_8++;
						// ////

						// ////

						// /////////////////////

						tos_count_tLogRow_8++;

						/**
						 * [tLogRow_8 main ] stop
						 */

						/**
						 * [tOracleInput_8 end ] start
						 */

						currentComponent = "tOracleInput_8";

					}
				} finally {
					stmt_tOracleInput_8.close();

					if (conn_tOracleInput_8 != null
							&& !conn_tOracleInput_8.isClosed()) {

						conn_tOracleInput_8.close();

					}

				}

				globalMap.put("tOracleInput_8_NB_LINE", nb_line_tOracleInput_8);

				ok_Hash.put("tOracleInput_8", true);
				end_Hash.put("tOracleInput_8", System.currentTimeMillis());

				/**
				 * [tOracleInput_8 end ] stop
				 */

				/**
				 * [tLogRow_8 end ] start
				 */

				currentComponent = "tLogRow_8";

				// ////
				// ////
				globalMap.put("tLogRow_8_NB_LINE", nb_line_tLogRow_8);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row8" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tLogRow_8", true);
				end_Hash.put("tLogRow_8", System.currentTimeMillis());

				/**
				 * [tLogRow_8 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tOracleInput_8 finally ] start
				 */

				currentComponent = "tOracleInput_8";

				/**
				 * [tOracleInput_8 finally ] stop
				 */

				/**
				 * [tLogRow_8 finally ] start
				 */

				currentComponent = "tLogRow_8";

				/**
				 * [tLogRow_8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tOracleInput_8_SUBPROCESS_STATE", 1);
	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_PROJET_BI_partenaires = new byte[0];
		static byte[] commonByteArray_PROJET_BI_partenaires = new byte[0];

		public String Partenaire_Nom;

		public String getPartenaire_Nom() {
			return this.Partenaire_Nom;
		}

		public BigDecimal CRD_Capital_Social_;

		public BigDecimal getCRD_Capital_Social_() {
			return this.CRD_Capital_Social_;
		}

		public BigDecimal CRD;

		public BigDecimal getCRD() {
			return this.CRD;
		}

		public BigDecimal Capital_Social;

		public BigDecimal getCapital_Social() {
			return this.Capital_Social;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_BI_partenaires.length) {
					if (length < 1024
							&& commonByteArray_PROJET_BI_partenaires.length == 0) {
						commonByteArray_PROJET_BI_partenaires = new byte[1024];
					} else {
						commonByteArray_PROJET_BI_partenaires = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_BI_partenaires, 0, length);
				strReturn = new String(commonByteArray_PROJET_BI_partenaires,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_BI_partenaires) {

				try {

					int length = 0;

					this.Partenaire_Nom = readString(dis);

					this.CRD_Capital_Social_ = (BigDecimal) dis.readObject();

					this.CRD = (BigDecimal) dis.readObject();

					this.Capital_Social = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Partenaire_Nom, dos);

				// BigDecimal

				dos.writeObject(this.CRD_Capital_Social_);

				// BigDecimal

				dos.writeObject(this.CRD);

				// BigDecimal

				dos.writeObject(this.Capital_Social);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Partenaire_Nom=" + Partenaire_Nom);
			sb.append(",CRD_Capital_Social_="
					+ String.valueOf(CRD_Capital_Social_));
			sb.append(",CRD=" + String.valueOf(CRD));
			sb.append(",Capital_Social=" + String.valueOf(Capital_Social));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tOracleInput_9Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleInput_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row9Struct row9 = new row9Struct();

				/**
				 * [tLogRow_9 begin ] start
				 */

				ok_Hash.put("tLogRow_9", false);
				start_Hash.put("tLogRow_9", System.currentTimeMillis());

				currentComponent = "tLogRow_9";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row9" + iterateId, 0, 0);

					}
				}

				int tos_count_tLogRow_9 = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_9 = "|";
				java.io.PrintStream consoleOut_tLogRow_9 = null;

				StringBuilder strBuffer_tLogRow_9 = null;
				int nb_line_tLogRow_9 = 0;
				// /////////////////////

				/**
				 * [tLogRow_9 begin ] stop
				 */

				/**
				 * [tOracleInput_9 begin ] start
				 */

				ok_Hash.put("tOracleInput_9", false);
				start_Hash.put("tOracleInput_9", System.currentTimeMillis());

				currentComponent = "tOracleInput_9";

				int tos_count_tOracleInput_9 = 0;

				int nb_line_tOracleInput_9 = 0;
				java.sql.Connection conn_tOracleInput_9 = null;
				String driverClass_tOracleInput_9 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_9);

				String url_tOracleInput_9 = null;
				url_tOracleInput_9 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host="
						+ "srvlaboinfo"
						+ ")(port="
						+ "1521"
						+ "))(connect_data=(service_name="
						+ "orcl.intranet.int" + ")))";

				String dbUser_tOracleInput_9 = "BI_2";

				final String decryptedPassword_tOracleInput_9 = routines.system.PasswordEncryptUtil
						.decryptPassword("7acac362d4dfb4fc");

				String dbPwd_tOracleInput_9 = decryptedPassword_tOracleInput_9;

				conn_tOracleInput_9 = java.sql.DriverManager.getConnection(
						url_tOracleInput_9, dbUser_tOracleInput_9,
						dbPwd_tOracleInput_9);
				java.sql.Statement stmtGetTZ_tOracleInput_9 = conn_tOracleInput_9
						.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_9 = stmtGetTZ_tOracleInput_9
						.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_9 = java.util.TimeZone
						.getDefault().getID();
				while (rsGetTZ_tOracleInput_9.next()) {
					sessionTimezone_tOracleInput_9 = rsGetTZ_tOracleInput_9
							.getString(1);
				}
				((oracle.jdbc.OracleConnection) conn_tOracleInput_9)
						.setSessionTimeZone(sessionTimezone_tOracleInput_9);

				java.sql.Statement stmt_tOracleInput_9 = conn_tOracleInput_9
						.createStatement();

				String dbquery_tOracleInput_9 = "SELECT \n  BI_2.PARTENAIRE_PTN.PTN_NOM AS \"Partenaire Nom\",\n  (CASE WHEN \n    SUM(BI_2.FAIT_PARTENAIRE.CRD_DEMANDE) \n    > \n    SUM(BI_2.FAIT_PARTENAIRE.CAPITAL_SOCIAL) \n    THEN 1 ELSE 0 END) AS \"CRD>Capital Social?\",\n  SUM(BI_2.FAIT_PARTENAIRE.CRD_DEMANDE) AS CRD, \n  SUM(BI_2.FAIT_PARTENAIRE.CAPITAL_SOCIAL) AS \"Capital Social\"\n  FROM BI_2.FAIT_PARTENAIRE\n  INNER JOIN BI_2.PARTENAIRE_PTN \n    ON BI_2.PARTENAIRE_PTN.PTN_ID = BI_2.FAIT_PARTENAIRE.ACT_ID\nGROUP BY  BI_2.PARTENAIRE_PTN.PTN_NOM";

				globalMap.put("tOracleInput_9_QUERY", dbquery_tOracleInput_9);

				java.sql.ResultSet rs_tOracleInput_9 = null;
				try {
					rs_tOracleInput_9 = stmt_tOracleInput_9
							.executeQuery(dbquery_tOracleInput_9);
					java.sql.ResultSetMetaData rsmd_tOracleInput_9 = rs_tOracleInput_9
							.getMetaData();
					int colQtyInRs_tOracleInput_9 = rsmd_tOracleInput_9
							.getColumnCount();

					String tmpContent_tOracleInput_9 = null;

					while (rs_tOracleInput_9.next()) {
						nb_line_tOracleInput_9++;

						if (colQtyInRs_tOracleInput_9 < 1) {
							row9.Partenaire_Nom = null;
						} else {

							tmpContent_tOracleInput_9 = rs_tOracleInput_9
									.getString(1);
							if (tmpContent_tOracleInput_9 != null) {
								row9.Partenaire_Nom = tmpContent_tOracleInput_9;
							} else {
								row9.Partenaire_Nom = null;
							}
						}
						if (colQtyInRs_tOracleInput_9 < 2) {
							row9.CRD_Capital_Social_ = null;
						} else {

							if (rs_tOracleInput_9.getObject(2) != null) {
								row9.CRD_Capital_Social_ = rs_tOracleInput_9
										.getBigDecimal(2);
							} else {

								row9.CRD_Capital_Social_ = null;
							}
						}
						if (colQtyInRs_tOracleInput_9 < 3) {
							row9.CRD = null;
						} else {

							if (rs_tOracleInput_9.getObject(3) != null) {
								row9.CRD = rs_tOracleInput_9.getBigDecimal(3);
							} else {

								row9.CRD = null;
							}
						}
						if (colQtyInRs_tOracleInput_9 < 4) {
							row9.Capital_Social = null;
						} else {

							if (rs_tOracleInput_9.getObject(4) != null) {
								row9.Capital_Social = rs_tOracleInput_9
										.getBigDecimal(4);
							} else {

								row9.Capital_Social = null;
							}
						}

						/**
						 * [tOracleInput_9 begin ] stop
						 */

						/**
						 * [tOracleInput_9 main ] start
						 */

						currentComponent = "tOracleInput_9";

						tos_count_tOracleInput_9++;

						/**
						 * [tOracleInput_9 main ] stop
						 */

						/**
						 * [tLogRow_9 main ] start
						 */

						currentComponent = "tLogRow_9";

						// row9
						// row9

						if (execStat) {
							runStat.updateStatOnConnection("row9" + iterateId,
									1, 1);
						}

						// /////////////////////

						strBuffer_tLogRow_9 = new StringBuilder();

						if (row9.Partenaire_Nom != null) { //

							strBuffer_tLogRow_9.append(String
									.valueOf(row9.Partenaire_Nom));

						} //

						strBuffer_tLogRow_9.append("|");

						if (row9.CRD_Capital_Social_ != null) { //

							strBuffer_tLogRow_9
									.append(row9.CRD_Capital_Social_.setScale(
											0, java.math.RoundingMode.HALF_UP)
											.toPlainString());

						} //

						strBuffer_tLogRow_9.append("|");

						if (row9.CRD != null) { //

							strBuffer_tLogRow_9.append(row9.CRD.setScale(0,
									java.math.RoundingMode.HALF_UP)
									.toPlainString());

						} //

						strBuffer_tLogRow_9.append("|");

						if (row9.Capital_Social != null) { //

							strBuffer_tLogRow_9
									.append(row9.Capital_Social.setScale(0,
											java.math.RoundingMode.HALF_UP)
											.toPlainString());

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_9 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_9 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_9);
						}
						consoleOut_tLogRow_9.println(strBuffer_tLogRow_9
								.toString());
						consoleOut_tLogRow_9.flush();
						nb_line_tLogRow_9++;
						// ////

						// ////

						// /////////////////////

						tos_count_tLogRow_9++;

						/**
						 * [tLogRow_9 main ] stop
						 */

						/**
						 * [tOracleInput_9 end ] start
						 */

						currentComponent = "tOracleInput_9";

					}
				} finally {
					stmt_tOracleInput_9.close();

					if (conn_tOracleInput_9 != null
							&& !conn_tOracleInput_9.isClosed()) {

						conn_tOracleInput_9.close();

					}

				}

				globalMap.put("tOracleInput_9_NB_LINE", nb_line_tOracleInput_9);

				ok_Hash.put("tOracleInput_9", true);
				end_Hash.put("tOracleInput_9", System.currentTimeMillis());

				/**
				 * [tOracleInput_9 end ] stop
				 */

				/**
				 * [tLogRow_9 end ] start
				 */

				currentComponent = "tLogRow_9";

				// ////
				// ////
				globalMap.put("tLogRow_9_NB_LINE", nb_line_tLogRow_9);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row9" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tLogRow_9", true);
				end_Hash.put("tLogRow_9", System.currentTimeMillis());

				/**
				 * [tLogRow_9 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tOracleInput_9 finally ] start
				 */

				currentComponent = "tOracleInput_9";

				/**
				 * [tOracleInput_9 finally ] stop
				 */

				/**
				 * [tLogRow_9 finally ] start
				 */

				currentComponent = "tLogRow_9";

				/**
				 * [tLogRow_9 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tOracleInput_9_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final partenaires partenairesClass = new partenaires();

		int exitCode = partenairesClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = partenaires.class.getClassLoader()
					.getResourceAsStream(
							"projet_bi/partenaires_0_1/contexts/" + contextStr
									+ ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tOracleInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tOracleInput_1) {
			globalMap.put("tOracleInput_1_SUBPROCESS_STATE", -1);

			e_tOracleInput_1.printStackTrace();

		}
		try {
			errorCode = null;
			tOracleInput_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tOracleInput_2) {
			globalMap.put("tOracleInput_2_SUBPROCESS_STATE", -1);

			e_tOracleInput_2.printStackTrace();

		}
		try {
			errorCode = null;
			tOracleInput_3Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tOracleInput_3) {
			globalMap.put("tOracleInput_3_SUBPROCESS_STATE", -1);

			e_tOracleInput_3.printStackTrace();

		}
		try {
			errorCode = null;
			tOracleInput_4Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tOracleInput_4) {
			globalMap.put("tOracleInput_4_SUBPROCESS_STATE", -1);

			e_tOracleInput_4.printStackTrace();

		}
		try {
			errorCode = null;
			tOracleInput_5Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tOracleInput_5) {
			globalMap.put("tOracleInput_5_SUBPROCESS_STATE", -1);

			e_tOracleInput_5.printStackTrace();

		}
		try {
			errorCode = null;
			tOracleInput_6Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tOracleInput_6) {
			globalMap.put("tOracleInput_6_SUBPROCESS_STATE", -1);

			e_tOracleInput_6.printStackTrace();

		}
		try {
			errorCode = null;
			tOracleInput_7Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tOracleInput_7) {
			globalMap.put("tOracleInput_7_SUBPROCESS_STATE", -1);

			e_tOracleInput_7.printStackTrace();

		}
		try {
			errorCode = null;
			tOracleInput_8Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tOracleInput_8) {
			globalMap.put("tOracleInput_8_SUBPROCESS_STATE", -1);

			e_tOracleInput_8.printStackTrace();

		}
		try {
			errorCode = null;
			tOracleInput_9Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tOracleInput_9) {
			globalMap.put("tOracleInput_9_SUBPROCESS_STATE", -1);

			e_tOracleInput_9.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : partenaires");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 144306 characters generated by Talend Open Studio for Data Integration on the
 * 1 février 2018 15:13:13 CET
 ************************************************************************************************/
