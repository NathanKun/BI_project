// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package projet_bi.copy_of_partenaires_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: Copy_of_partenaires Purpose: Nombre total de demandes pour partenaires<br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.2.1.20160704_1411
 * @status 
 */
public class Copy_of_partenaires implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Copy_of_partenaires";
	private final String projectName = "PROJET_BI";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Copy_of_partenaires.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Copy_of_partenaires.this, new Object[] {
									e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tOracleInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSalesforceOutput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_PROJET_BI_Copy_of_partenaires = new byte[0];
		static byte[] commonByteArray_PROJET_BI_Copy_of_partenaires = new byte[0];

		public String Partenaire_Nom;

		public String getPartenaire_Nom() {
			return this.Partenaire_Nom;
		}

		public BigDecimal Nombre_total_de_demande;

		public BigDecimal getNombre_total_de_demande() {
			return this.Nombre_total_de_demande;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_BI_Copy_of_partenaires.length) {
					if (length < 1024
							&& commonByteArray_PROJET_BI_Copy_of_partenaires.length == 0) {
						commonByteArray_PROJET_BI_Copy_of_partenaires = new byte[1024];
					} else {
						commonByteArray_PROJET_BI_Copy_of_partenaires = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_BI_Copy_of_partenaires, 0,
						length);
				strReturn = new String(
						commonByteArray_PROJET_BI_Copy_of_partenaires, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_BI_Copy_of_partenaires) {

				try {

					int length = 0;

					this.Partenaire_Nom = readString(dis);

					this.Nombre_total_de_demande = (BigDecimal) dis
							.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Partenaire_Nom, dos);

				// BigDecimal

				dos.writeObject(this.Nombre_total_de_demande);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Partenaire_Nom=" + Partenaire_Nom);
			sb.append(",Nombre_total_de_demande="
					+ String.valueOf(Nombre_total_de_demande));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tOracleInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tSalesforceOutput_2 begin ] start
				 */

				ok_Hash.put("tSalesforceOutput_2", false);
				start_Hash.put("tSalesforceOutput_2",
						System.currentTimeMillis());

				currentComponent = "tSalesforceOutput_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tSalesforceOutput_2 = 0;

				org.talend.components.api.component.ComponentDefinition def_tSalesforceOutput_2 = new org.talend.components.salesforce.tsalesforceoutput.TSalesforceOutputDefinition();

				org.talend.components.salesforce.tsalesforceoutput.TSalesforceOutputProperties props_tSalesforceOutput_2 = (org.talend.components.salesforce.tsalesforceoutput.TSalesforceOutputProperties) def_tSalesforceOutput_2
						.createRuntimeProperties();
				props_tSalesforceOutput_2.setValue("extendInsert", true);
				props_tSalesforceOutput_2.setValue("ceaseForError", true);
				props_tSalesforceOutput_2.setValue("commitLevel", 200);
				props_tSalesforceOutput_2.setValue("logFileName", "");
				props_tSalesforceOutput_2
						.setValue(
								"outputAction",
								org.talend.components.salesforce.SalesforceOutputProperties.OutputAction.INSERT);
				props_tSalesforceOutput_2.upsertRelationTable.setValue(
						"columnName", "Id");
				props_tSalesforceOutput_2.schemaFlow
						.setValue(
								"schema",
								new org.apache.avro.Schema.Parser()
										.parse("{\"type\":\"record\",\"name\":\"project_bi__c\",\"fields\":[{\"name\":\"Id\",\"type\":\"string\",\"talend.field.length\":\"18\"},{\"name\":\"OwnerId\",\"type\":\"string\",\"talend.field.length\":\"18\",\"salesforce.ref.module\":\"Group\",\"salesforce.ref.field\":\"Owner\"},{\"name\":\"IsDeleted\",\"type\":\"boolean\"},{\"name\":\"Name\",\"type\":[\"string\",\"null\"],\"talend.field.length\":\"80\"},{\"name\":\"CreatedDate\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\"},{\"name\":\"CreatedById\",\"type\":\"string\",\"talend.field.length\":\"18\",\"salesforce.ref.module\":\"User\",\"salesforce.ref.field\":\"CreatedBy\"},{\"name\":\"LastModifiedDate\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\"},{\"name\":\"LastModifiedById\",\"type\":\"string\",\"talend.field.length\":\"18\",\"salesforce.ref.module\":\"User\",\"salesforce.ref.field\":\"LastModifiedBy\"},{\"name\":\"SystemModstamp\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\"},{\"name\":\"LastActivityDate\",\"type\":[{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"null\"],\"talend.field.pattern\":\"yyyy-MM-dd\"},{\"name\":\"LastViewedDate\",\"type\":[{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"null\"],\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\"},{\"name\":\"LastReferencedDate\",\"type\":[{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"null\"],\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\"},{\"name\":\"Partenaire_Nom__c\",\"type\":[\"string\",\"null\"],\"talend.field.length\":\"255\"},{\"name\":\"Nombre_total_de_demande__c\",\"type\":[\"double\",\"null\"],\"talend.field.length\":\"18\"}]}"));
				props_tSalesforceOutput_2.schemaReject
						.setValue(
								"schema",
								new org.apache.avro.Schema.Parser()
										.parse("{\"type\":\"record\",\"name\":\"rejectOutput\",\"fields\":[{\"name\":\"Id\",\"type\":\"string\",\"talend.field.length\":\"18\"},{\"name\":\"OwnerId\",\"type\":\"string\",\"talend.field.length\":\"18\",\"salesforce.ref.module\":\"Group\",\"salesforce.ref.field\":\"Owner\"},{\"name\":\"IsDeleted\",\"type\":\"boolean\"},{\"name\":\"Name\",\"type\":[\"string\",\"null\"],\"talend.field.length\":\"80\"},{\"name\":\"CreatedDate\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\"},{\"name\":\"CreatedById\",\"type\":\"string\",\"talend.field.length\":\"18\",\"salesforce.ref.module\":\"User\",\"salesforce.ref.field\":\"CreatedBy\"},{\"name\":\"LastModifiedDate\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\"},{\"name\":\"LastModifiedById\",\"type\":\"string\",\"talend.field.length\":\"18\",\"salesforce.ref.module\":\"User\",\"salesforce.ref.field\":\"LastModifiedBy\"},{\"name\":\"SystemModstamp\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\"},{\"name\":\"LastActivityDate\",\"type\":[{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"null\"],\"talend.field.pattern\":\"yyyy-MM-dd\"},{\"name\":\"LastViewedDate\",\"type\":[{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"null\"],\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\"},{\"name\":\"LastReferencedDate\",\"type\":[{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"null\"],\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\"},{\"name\":\"Partenaire_Nom__c\",\"type\":[\"string\",\"null\"],\"talend.field.length\":\"255\"},{\"name\":\"Nombre_total_de_demande__c\",\"type\":[\"double\",\"null\"],\"talend.field.length\":\"18\"},{\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{\"name\":\"errorFields\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}"));
				props_tSalesforceOutput_2.connection.setValue("endpoint",
						"https://cs80.salesforce.com/services/Soap/u/34.0");
				props_tSalesforceOutput_2.connection
						.setValue(
								"loginType",
								org.talend.components.salesforce.SalesforceConnectionProperties.LoginType.Basic);
				props_tSalesforceOutput_2.connection.setValue("bulkConnection",
						false);
				props_tSalesforceOutput_2.connection.setValue(
						"needCompression", false);
				props_tSalesforceOutput_2.connection.setValue("timeout", 60000);
				props_tSalesforceOutput_2.connection.setValue("httpChunked",
						true);
				props_tSalesforceOutput_2.connection.setValue("clientId", "");
				props_tSalesforceOutput_2.connection.userPassword
						.setValue(
								"securityKey",
								routines.system.PasswordEncryptUtil
										.decryptPassword("08cf78fe05ea85c4778953302944fa8c7443f7b23ae2e5b6f4f7aba1746784ea"));
				props_tSalesforceOutput_2.connection.userPassword.setValue(
						"userId",
						"nouriath.affo@groupe-esigelec.org.partenaire");
				props_tSalesforceOutput_2.connection.userPassword
						.setValue(
								"password",
								routines.system.PasswordEncryptUtil
										.decryptPassword("d1af041510a5b812f4f7aba1746784ea"));
				props_tSalesforceOutput_2.connection.proxy.setValue("useProxy",
						false);
				props_tSalesforceOutput_2.module.setValue("moduleName",
						"project_bi__c");
				props_tSalesforceOutput_2.module.connection.setValue(
						"endpoint",
						"https://cs80.salesforce.com/services/Soap/u/34.0");
				props_tSalesforceOutput_2.module.connection
						.setValue(
								"loginType",
								org.talend.components.salesforce.SalesforceConnectionProperties.LoginType.Basic);
				props_tSalesforceOutput_2.module.connection.setValue(
						"bulkConnection", false);
				props_tSalesforceOutput_2.module.connection.setValue(
						"needCompression", false);
				props_tSalesforceOutput_2.module.connection.setValue("timeout",
						60000);
				props_tSalesforceOutput_2.module.connection.setValue(
						"httpChunked", true);
				props_tSalesforceOutput_2.module.connection.setValue(
						"clientId", "");
				props_tSalesforceOutput_2.module.connection.userPassword
						.setValue(
								"securityKey",
								routines.system.PasswordEncryptUtil
										.decryptPassword("08cf78fe05ea85c4778953302944fa8c7443f7b23ae2e5b6f4f7aba1746784ea"));
				props_tSalesforceOutput_2.module.connection.userPassword
						.setValue("userId",
								"nouriath.affo@groupe-esigelec.org.partenaire");
				props_tSalesforceOutput_2.module.connection.userPassword
						.setValue(
								"password",
								routines.system.PasswordEncryptUtil
										.decryptPassword("d1af041510a5b812f4f7aba1746784ea"));
				props_tSalesforceOutput_2.module.connection.proxy.setValue(
						"useProxy", false);
				props_tSalesforceOutput_2.module.main
						.setValue(
								"schema",
								new org.apache.avro.Schema.Parser()
										.parse("{\"type\":\"record\",\"name\":\"project_bi__c\",\"fields\":[{\"name\":\"Id\",\"type\":\"string\",\"talend.field.length\":\"18\"},{\"name\":\"OwnerId\",\"type\":\"string\",\"talend.field.length\":\"18\",\"salesforce.ref.module\":\"Group\",\"salesforce.ref.field\":\"Owner\"},{\"name\":\"IsDeleted\",\"type\":\"boolean\"},{\"name\":\"Name\",\"type\":[\"string\",\"null\"],\"talend.field.length\":\"80\"},{\"name\":\"CreatedDate\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\"},{\"name\":\"CreatedById\",\"type\":\"string\",\"talend.field.length\":\"18\",\"salesforce.ref.module\":\"User\",\"salesforce.ref.field\":\"CreatedBy\"},{\"name\":\"LastModifiedDate\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\"},{\"name\":\"LastModifiedById\",\"type\":\"string\",\"talend.field.length\":\"18\",\"salesforce.ref.module\":\"User\",\"salesforce.ref.field\":\"LastModifiedBy\"},{\"name\":\"SystemModstamp\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\"},{\"name\":\"LastActivityDate\",\"type\":[{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"null\"],\"talend.field.pattern\":\"yyyy-MM-dd\"},{\"name\":\"LastViewedDate\",\"type\":[{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"null\"],\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\"},{\"name\":\"LastReferencedDate\",\"type\":[{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"null\"],\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\"},{\"name\":\"Partenaire_Nom__c\",\"type\":[\"string\",\"null\"],\"talend.field.length\":\"255\"},{\"name\":\"Nombre_total_de_demande__c\",\"type\":[\"double\",\"null\"],\"talend.field.length\":\"18\"}]}"));
				org.talend.components.api.container.RuntimeContainer container_tSalesforceOutput_2 = new org.talend.components.api.container.RuntimeContainer() {
					public Object getComponentData(String componentId,
							String key) {
						return globalMap.get(componentId + "_" + key);
					}

					public void setComponentData(String componentId,
							String key, Object data) {
						globalMap.put(componentId + "_" + key, data);
					}

					public String getCurrentComponentId() {
						return "tSalesforceOutput_2";
					}
				};

				int nb_line_tSalesforceOutput_2 = 0;

				org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceOutput_2 = ((org.talend.components.api.component.EndpointComponentDefinition) def_tSalesforceOutput_2)
						.getRuntime();
				sourceOrSink_tSalesforceOutput_2.initialize(
						container_tSalesforceOutput_2,
						props_tSalesforceOutput_2);
				org.talend.daikon.properties.ValidationResult vr_tSalesforceOutput_2 = sourceOrSink_tSalesforceOutput_2
						.validate(container_tSalesforceOutput_2);
				if (vr_tSalesforceOutput_2.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
					throw new RuntimeException(
							vr_tSalesforceOutput_2.getMessage());
				}
				org.talend.components.api.component.runtime.Sink sink_tSalesforceOutput_2 = (org.talend.components.api.component.runtime.Sink) sourceOrSink_tSalesforceOutput_2;
				org.talend.components.api.component.runtime.WriteOperation writeOperation_tSalesforceOutput_2 = sink_tSalesforceOutput_2
						.createWriteOperation();
				writeOperation_tSalesforceOutput_2
						.initialize(container_tSalesforceOutput_2);
				org.talend.components.api.component.runtime.Writer writer_tSalesforceOutput_2 = writeOperation_tSalesforceOutput_2
						.createWriter(container_tSalesforceOutput_2);
				writer_tSalesforceOutput_2.open("tSalesforceOutput_2");

				resourceMap.put("writer_tSalesforceOutput_2",
						writer_tSalesforceOutput_2);

				org.talend.components.api.component.Connector c_tSalesforceOutput_2 = null;
				for (org.talend.components.api.component.Connector currentConnector : props_tSalesforceOutput_2
						.getAvailableConnectors(null, false)) {
					if (currentConnector.getName().equals("MAIN")) {
						c_tSalesforceOutput_2 = currentConnector;
						break;
					}
				}
				org.apache.avro.Schema designSchema_tSalesforceOutput_2 = props_tSalesforceOutput_2
						.getSchema(c_tSalesforceOutput_2, false);
				org.talend.daikon.di.DiIncomingSchemaEnforcer current_tSalesforceOutput_2 = new org.talend.daikon.di.DiIncomingSchemaEnforcer(
						designSchema_tSalesforceOutput_2);

				/**
				 * [tSalesforceOutput_2 begin ] stop
				 */

				/**
				 * [tOracleInput_1 begin ] start
				 */

				ok_Hash.put("tOracleInput_1", false);
				start_Hash.put("tOracleInput_1", System.currentTimeMillis());

				currentComponent = "tOracleInput_1";

				int tos_count_tOracleInput_1 = 0;

				int nb_line_tOracleInput_1 = 0;
				java.sql.Connection conn_tOracleInput_1 = null;
				String driverClass_tOracleInput_1 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_1);

				String url_tOracleInput_1 = null;
				url_tOracleInput_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host="
						+ "srvlaboinfo"
						+ ")(port="
						+ "1521"
						+ "))(connect_data=(service_name="
						+ "orcl.intranet.int" + ")))";

				String dbUser_tOracleInput_1 = "BI_2";

				final String decryptedPassword_tOracleInput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("7acac362d4dfb4fc");

				String dbPwd_tOracleInput_1 = decryptedPassword_tOracleInput_1;

				conn_tOracleInput_1 = java.sql.DriverManager.getConnection(
						url_tOracleInput_1, dbUser_tOracleInput_1,
						dbPwd_tOracleInput_1);
				java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1
						.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1
						.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_1 = java.util.TimeZone
						.getDefault().getID();
				while (rsGetTZ_tOracleInput_1.next()) {
					sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1
							.getString(1);
				}
				((oracle.jdbc.OracleConnection) conn_tOracleInput_1)
						.setSessionTimeZone(sessionTimezone_tOracleInput_1);

				java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1
						.createStatement();

				String dbquery_tOracleInput_1 = "SELECT \n  BI_2.PARTENAIRE_PTN.PTN_NOM AS \"Partenaire Nom\", \n  SUM(BI_2.FAIT_PARTENAIRE.NBRE_DEMANDE) AS \"Nombre total de demande\"\n  FROM BI_2.FAIT_PARTENAIRE\n  INNER JOIN BI_2.PARTENAIRE_PTN \n    ON BI_2.PARTENAIRE_PTN.PTN_ID = BI_2.FAIT_PARTENAIRE.ACT_ID\nGROUP BY  BI_2.PARTENAIRE_PTN.PTN_NOM";

				globalMap.put("tOracleInput_1_QUERY", dbquery_tOracleInput_1);

				java.sql.ResultSet rs_tOracleInput_1 = null;
				try {
					rs_tOracleInput_1 = stmt_tOracleInput_1
							.executeQuery(dbquery_tOracleInput_1);
					java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1
							.getMetaData();
					int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1
							.getColumnCount();

					String tmpContent_tOracleInput_1 = null;

					while (rs_tOracleInput_1.next()) {
						nb_line_tOracleInput_1++;

						if (colQtyInRs_tOracleInput_1 < 1) {
							row1.Partenaire_Nom = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1
									.getString(1);
							if (tmpContent_tOracleInput_1 != null) {
								row1.Partenaire_Nom = tmpContent_tOracleInput_1;
							} else {
								row1.Partenaire_Nom = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 2) {
							row1.Nombre_total_de_demande = null;
						} else {

							if (rs_tOracleInput_1.getObject(2) != null) {
								row1.Nombre_total_de_demande = rs_tOracleInput_1
										.getBigDecimal(2);
							} else {

								row1.Nombre_total_de_demande = null;
							}
						}

						/**
						 * [tOracleInput_1 begin ] stop
						 */

						/**
						 * [tOracleInput_1 main ] start
						 */

						currentComponent = "tOracleInput_1";

						tos_count_tOracleInput_1++;

						/**
						 * [tOracleInput_1 main ] stop
						 */

						/**
						 * [tSalesforceOutput_2 main ] start
						 */

						currentComponent = "tSalesforceOutput_2";

						// row1
						// row1

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId,
									1, 1);
						}

						current_tSalesforceOutput_2.put("Partenaire_Nom",
								row1.Partenaire_Nom);
						current_tSalesforceOutput_2.put(
								"Nombre_total_de_demande",
								row1.Nombre_total_de_demande);
						Object data_tSalesforceOutput_2 = current_tSalesforceOutput_2
								.createIndexedRecord();

						writer_tSalesforceOutput_2
								.write(data_tSalesforceOutput_2);

						nb_line_tSalesforceOutput_2++;

						tos_count_tSalesforceOutput_2++;

						/**
						 * [tSalesforceOutput_2 main ] stop
						 */

						/**
						 * [tOracleInput_1 end ] start
						 */

						currentComponent = "tOracleInput_1";

					}
				} finally {
					stmt_tOracleInput_1.close();

					if (conn_tOracleInput_1 != null
							&& !conn_tOracleInput_1.isClosed()) {

						conn_tOracleInput_1.close();

					}

				}

				globalMap.put("tOracleInput_1_NB_LINE", nb_line_tOracleInput_1);

				ok_Hash.put("tOracleInput_1", true);
				end_Hash.put("tOracleInput_1", System.currentTimeMillis());

				/**
				 * [tOracleInput_1 end ] stop
				 */

				/**
				 * [tSalesforceOutput_2 end ] start
				 */

				currentComponent = "tSalesforceOutput_2";

				// end of generic

				resourceMap.put("finish_tSalesforceOutput_2", Boolean.TRUE);

				org.talend.components.api.component.runtime.Result resultObject_tSalesforceOutput_2 = (org.talend.components.api.component.runtime.Result) writer_tSalesforceOutput_2
						.close();
				final java.util.Map<String, Object> resultMap_tSalesforceOutput_2 = writer_tSalesforceOutput_2
						.getWriteOperation()
						.finalize(
								java.util.Arrays
										.<org.talend.components.api.component.runtime.Result> asList(resultObject_tSalesforceOutput_2),
								container_tSalesforceOutput_2);
				if (resultMap_tSalesforceOutput_2 != null) {
					for (java.util.Map.Entry<String, Object> entry_tSalesforceOutput_2 : resultMap_tSalesforceOutput_2
							.entrySet()) {
						switch (entry_tSalesforceOutput_2.getKey()) {
						case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE:
							container_tSalesforceOutput_2.setComponentData(
									"tSalesforceOutput_2", "ERROR_MESSAGE",
									entry_tSalesforceOutput_2.getValue());
							break;
						case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT:
							container_tSalesforceOutput_2.setComponentData(
									"tSalesforceOutput_2", "NB_LINE",
									entry_tSalesforceOutput_2.getValue());
							break;
						case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT:
							container_tSalesforceOutput_2.setComponentData(
									"tSalesforceOutput_2", "NB_SUCCESS",
									entry_tSalesforceOutput_2.getValue());
							break;
						case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT:
							container_tSalesforceOutput_2.setComponentData(
									"tSalesforceOutput_2", "NB_REJECT",
									entry_tSalesforceOutput_2.getValue());
							break;
						default:
							StringBuilder studio_key_tSalesforceOutput_2 = new StringBuilder();
							for (int i_tSalesforceOutput_2 = 0; i_tSalesforceOutput_2 < entry_tSalesforceOutput_2
									.getKey().length(); i_tSalesforceOutput_2++) {
								char ch_tSalesforceOutput_2 = entry_tSalesforceOutput_2
										.getKey().charAt(i_tSalesforceOutput_2);
								if (Character
										.isUpperCase(ch_tSalesforceOutput_2)
										&& i_tSalesforceOutput_2 > 0) {
									studio_key_tSalesforceOutput_2.append('_');
								}
								studio_key_tSalesforceOutput_2
										.append(ch_tSalesforceOutput_2);
							}
							container_tSalesforceOutput_2.setComponentData(
									"tSalesforceOutput_2",
									studio_key_tSalesforceOutput_2.toString()
											.toUpperCase(
													java.util.Locale.ENGLISH),
									entry_tSalesforceOutput_2.getValue());
							break;
						}
					}
				}
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tSalesforceOutput_2", true);
				end_Hash.put("tSalesforceOutput_2", System.currentTimeMillis());

				/**
				 * [tSalesforceOutput_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tOracleInput_1 finally ] start
				 */

				currentComponent = "tOracleInput_1";

				/**
				 * [tOracleInput_1 finally ] stop
				 */

				/**
				 * [tSalesforceOutput_2 finally ] start
				 */

				currentComponent = "tSalesforceOutput_2";

				// finally of generic

				if (resourceMap.get("finish_tSalesforceOutput_2") == null) {
					if (resourceMap.get("writer_tSalesforceOutput_2") != null) {
						try {
							((org.talend.components.api.component.runtime.Writer) resourceMap
									.get("writer_tSalesforceOutput_2")).close();
						} catch (java.io.IOException e_tSalesforceOutput_2) {
							String errorMessage_tSalesforceOutput_2 = "failed to release the resource in tSalesforceOutput_2 :"
									+ e_tSalesforceOutput_2.getMessage();
							System.err
									.println(errorMessage_tSalesforceOutput_2);
						}
					}
				}

				/**
				 * [tSalesforceOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Copy_of_partenaires Copy_of_partenairesClass = new Copy_of_partenaires();

		int exitCode = Copy_of_partenairesClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = Copy_of_partenaires.class
					.getClassLoader().getResourceAsStream(
							"projet_bi/copy_of_partenaires_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tOracleInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tOracleInput_1) {
			globalMap.put("tOracleInput_1_SUBPROCESS_STATE", -1);

			e_tOracleInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : Copy_of_partenaires");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 47642 characters generated by Talend Open Studio for Data Integration on the
 * 1 février 2018 16:46:39 CET
 ************************************************************************************************/
